{"version":3,"sources":["components/FriendCard/index.jsx","components/Nav/index.jsx","components/Wrapper/index.jsx","components/Title/index.jsx","Container.jsx","Row.jsx","Column.jsx","App.jsx","serviceWorker.js","index.js"],"names":["FriendCard","props","react_default","a","createElement","className","value","id","onClick","handleClick","src","image","alt","name","Nav","href","title","trueFalse","score","topScore","Wrapper","children","Title","Container","concat","fluid","Row","Column","size","split","map","join","App","state","friends","currentScore","clicked","_this","indexOf","handleIncrement","setState","handleReset","newScore","handleShuffle","shuffledFriends","array","i","length","j","Math","floor","random","_ref","shuffleFriends","_this2","this","components_Wrapper","components_Nav","components_Title","src_Container","src_Row","friend","src_Column","components_FriendCard","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.13fefe78.chunk.js","sourcesContent":["import React from 'react';\nimport './style.css';\n\nfunction FriendCard(props) {\n     return(\n          <div \n               className=\"card\" \n               value={props.id}\n               onClick={() => props.handleClick(props.id)}\n          >\n               <div className=\"img-container\">\n                    <img src={props.image} alt={props.name} />\n               </div>\n          </div>\n     )\n}\n\nexport default FriendCard;","import React from 'react';\nimport './style.css';\n\nconst Nav = props => (\n  <nav>\n    <ul>\n      <li className=\"brand animated lightSpeedIn\">\n        <a href=\"/remember-me/\">{props.title}</a>\n      </li>\n\n      <li id=\"tf\">{props.trueFalse}</li>\n\n      <li id=\"curScore\">Current Score: {props.score}</li>\n\n      <li id=\"topScore\">Top Score: {props.topScore}</li>\n    </ul>\n  </nav>\n);\n\nexport default Nav;","import React from 'react';\nimport './style.css';\n\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>\n\nexport default Wrapper;","import React from \"react\";\nimport \"./style.css\";\n\nconst Title = props => <h4 className=\"title\">{props.children}</h4>\n\nexport default Title;","import React from \"react\";\n\nconst Container = props =>\n  <div className={`container${props.fluid ? \"-fluid\" : \"\"}`}>\n    {props.children}\n  </div>;\n\nexport default Container;","import React from \"react\";\n\nconst Row = props =>\n  <div className={`row${props.fluid ? \"-fluid\" : \"\"}`}>\n    {props.children}\n  </div>;\n\nexport default Row;","import React from \"react\";\n\nconst Column = props => {\n  const size = props.size.split(\" \").map(size => \"col-\" + size).join(\" \");\n  return (\n    <div className={size}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Column;","import React, { Component } from 'react';\nimport FriendCard from './components/FriendCard/index';\nimport Nav from './components/Nav/index';\nimport Wrapper from './components/Wrapper/index';\nimport Title from './components/Title/index'\nimport Container from './Container'\nimport Row from './Row';\nimport Column from './Column';\nimport friends from './friends.json';\nimport './App.css';\n\n// Shuffle Friends\nfunction shuffleFriends(array) {\n    for (let i = array.length - 1; i > 0; i--) {\n        let j = Math.floor(Math.random() * (i + 1));\n        [array[i], array[j]] = [array[j], array[i]];\n    }\n    return array;\n};\n\n// create Class\nclass App extends Component {\n    // set state\n    state = {\n        friends,\n        currentScore: 0,\n        topScore: 0,\n        trueFalse: \"\",\n        clicked: []\n    }\n\n    // handle click\n    handleClick = id => {\n        if (this.state.clicked.indexOf(id) === -1) {\n            this.handleIncrement();\n            this.setState({ clicked: this.state.clicked.concat(id) });\n        } else {\n            this.handleReset();\n        }\n    };\n\n    // handle score increment\n    handleIncrement = () => {\n        const newScore = this.state.currentScore + 1;\n        this.setState({\n            currentScore: newScore,\n            trueFalse: \"\"\n        });\n        if (newScore >= this.state.topScore) {\n            this.setState({ topScore: newScore });\n        }\n        else if (newScore === 12) {\n            this.setState({ trueFalse: 'Congratulations, Bobby!!' });\n        }\n        this.handleShuffle();\n    };\n\n    // handle game reset\n    handleReset = () => {\n        this.setState({\n            currentScore: 0,\n            topScore: this.state.topScore,\n            trueFalse: 'Goodbye, Bill',\n            clicked: []\n        });\n        this.handleShuffle();\n    }\n\n    // handle shuffle\n    handleShuffle = () => {\n        let shuffledFriends = shuffleFriends(friends);\n        this.setState({ friends: shuffledFriends });\n      };\n    \n    // render screen\n    render() {\n        return (\n            <Wrapper>\n                <Nav\n                    title='King of the Hill Memory Game!'\n                    score={this.state.currentScore}\n                    topScore={this.state.topScore}\n                    trueFalse={this.state.trueFalse}\n                />\n\n                <Title>\n                    Click on an image to earn points, \n                    but don't click on any more than once!\n                </Title>\n                \n                <Container>\n                    <Row>\n                        {this.state.friends.map(friend => (\n                            <Column size='md-3 sm-6'>\n                                <FriendCard \n                                    key={friend.id}\n                                    handleClick={this.handleClick}\n                                    handleIncrement={this.handleIncrement}\n                                    handleReset={this.handleReset}\n                                    handleShuffle={this.handleShuffle}\n                                    id={friend.id}\n                                    image={friend.image}\n                                />\n                            </Column>\n                        ))}\n                    </Row>\n                </Container>\n            </Wrapper>\n        );\n    }\n}\n\n// export App\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}