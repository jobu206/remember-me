{"version":3,"sources":["components/FriendCard/index.jsx","components/Nav/index.jsx","components/Wrapper/index.jsx","Container.jsx","Row.jsx","Column.jsx","App.jsx","serviceWorker.js","index.js"],"names":["FriendCard","props","react_default","a","createElement","className","src","image","alt","name","Nav","href","title","id","trueFalse","score","topScore","Wrapper","children","Container","concat","fluid","Row","Column","size","split","map","join","App","state","friends","currentScore","clicked","handleClick","_this","indexOf","handleIncrement","setState","handleReset","newScore","handleShuffle","shuffledFriends","array","i","length","j","Math","floor","random","_ref","shuffleFriends","_this2","this","components_Wrapper","components_Nav","Title_default","src_Container","src_Row","friend","src_Column","components_FriendCard","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.379b6bd9.chunk.js","sourcesContent":["import React from 'react';\r\nimport './style.css';\r\n\r\nfunction FriendCard(props) {\r\n     return(\r\n          <div className=\"card\">\r\n               <div className=\"img-container\">\r\n                    <img src={props.image} alt={props.name} />\r\n               </div>\r\n          </div>\r\n     )\r\n}\r\n\r\nexport default FriendCard;","import React from 'react';\r\nimport './style.css';\r\n\r\nconst Nav = props => (\r\n  <nav>\r\n    <ul>\r\n      <li className=\"brand animated lightSpeedIn\">\r\n        <a href=\"/remember-me/\">{props.title}</a>\r\n      </li>\r\n\r\n      <li id=\"tf\">{props.trueFalse}</li>\r\n\r\n      <li id=\"curScore\">Current Score: {props.score}</li>\r\n\r\n      <li id=\"topScore\">Top Score: {props.topScore}</li>\r\n    </ul>\r\n  </nav>\r\n);\r\n\r\nexport default Nav;","import React from 'react';\r\nimport './style.css';\r\n\r\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>\r\n\r\nexport default Wrapper;","import React from \"react\";\r\n\r\nconst Container = props =>\r\n  <div className={`container${props.fluid ? \"-fluid\" : \"\"}`}>\r\n    {props.children}\r\n  </div>;\r\n\r\nexport default Container;","import React from \"react\";\r\n\r\nconst Row = props =>\r\n  <div className={`row${props.fluid ? \"-fluid\" : \"\"}`}>\r\n    {props.children}\r\n  </div>;\r\n\r\nexport default Row;","import React from \"react\";\r\n\r\nconst Column = props => {\r\n  const size = props.size.split(\" \").map(size => \"col-\" + size).join(\" \");\r\n  return (\r\n    <div className={size}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Column;","import React, { Component } from 'react';\r\nimport FriendCard from './components/FriendCard/index';\r\nimport Nav from './components/Nav/index';\r\nimport Wrapper from './components/Wrapper/index';\r\nimport Title from './components/Title/index'\r\nimport Container from './Container'\r\nimport Row from './Row';\r\nimport Column from './Column';\r\nimport friends from './friends.json';\r\nimport './App.css';\r\n\r\n// Shuffle Friends\r\nfunction shuffleFriends(array) {\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n        let j = Math.floor(Math.random() * (i + 1));\r\n        [array[i], array[j]] = [array[j], array[i]];\r\n    }\r\n    return array;\r\n};\r\n\r\n// create Class\r\nclass App extends Component {\r\n    // set state\r\n    state = {\r\n        friends,\r\n        currentScore: 0,\r\n        topScore: 0,\r\n        trueFalse: '',\r\n        clicked: []\r\n    }\r\n\r\n    // handle click\r\n    handleClick = id => {\r\n        if (this.state.clicked.indexOf(id) === -1) {\r\n            this.handleIncrement();\r\n            this.setState({ clicked: this.state.clicked.concat(id) })\r\n        } else {\r\n            this.handleReset();\r\n        }\r\n    };\r\n\r\n    // handle score increment\r\n    handleIncrement = () => {\r\n        const newScore = this.state.currentScore + 1;\r\n        this.setState({\r\n            currentScore: newScore,\r\n            trueFalse: ''\r\n        });\r\n        if (newScore >= this.state.topScore) {\r\n            this.setState({ topScore: newScore });\r\n        }\r\n        else if (newScore === 12) {\r\n            this.setState({ trueFalse: 'Congratulations, Bobby!!' });\r\n        }\r\n        this.handleShuffle();\r\n    };\r\n\r\n    // handle game reset\r\n    handleReset = () => {\r\n        this.setState({\r\n            currentScore: 0,\r\n            topScore: this.state.topScore,\r\n            trueFalse: 'Goodbye, Bill',\r\n            clicked: []\r\n        });\r\n        this.handleShuffle();\r\n    }\r\n\r\n    // handle shuffle\r\n    handleShuffle = () => {\r\n        let shuffledFriends = shuffleFriends(friends);\r\n        this.setState({ friends: shuffledFriends });\r\n      };\r\n    \r\n    // render screen\r\n    render() {\r\n        return (\r\n            <Wrapper>\r\n                <Nav\r\n                    title='King of the Hill Memory Game!'\r\n                    score={this.setState.currentScore}\r\n                    topScore={this.setState.topScore}\r\n                    trueFalse={this.state.trueFalse}\r\n                />\r\n\r\n                <Title>\r\n                    Click on an image to earn points, \r\n                    but don't click on any more than once!\r\n                </Title>\r\n                \r\n                <Container>\r\n                    <Row>\r\n                        {this.state.friends.map(friend => (\r\n                            <Column size='md-4 sm-8'>\r\n                                <FriendCard \r\n                                    key={friend.id}\r\n                                    handleClick={this.handleClick}\r\n                                    handleIncrement={this.handleIncrement}\r\n                                    handleReset={this.handleReset}\r\n                                    handleShuffle={this.handleShuffle}\r\n                                    id={friend.id}\r\n                                    image={friend.image}\r\n                                />\r\n                            </Column>\r\n                        ))}\r\n                    </Row>\r\n                </Container>\r\n            </Wrapper>\r\n        );\r\n    }\r\n}\r\n\r\n// export App\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}